// Generated by CoffeeScript 1.12.6
var changeNick, cmdNames, command, connect, cycle, disconnect, has, historyPos, lastTab, mainLoop, newSpoiler, nick, nicked, nonHistory, parse, sendHistory, sendText, show, spoilerNums, toggleSpoiler, validateSendText;

nicked = false;

nick = null;

sendHistory = [];

historyPos = -1;

nonHistory = "";

cycle = 0;

lastTab = "";

has = function(a, i) {
  var j, len, x;
  for (j = 0, len = a.length; j < len; j++) {
    x = a[j];
    if (x === i) {
      return true;
    }
  }
  return false;
};

connect = function(again) {
  if (again == null) {
    again = false;
  }
  if (again) {
    nick = window.prompt("Already used! Use another nickname:", "default_user1").replace("&", "&amp;").replace("<", "&lt;").replace("\"", "&quot;").replace("'", "&apos;").slice(0, 50);
  } else {
    nick = window.prompt("Set your nickname:", "default_user").replace("&", "&amp;").replace("<", "&lt;").replace("\"", "&quot;").replace("'", "&apos;").slice(0, 50);
  }
  return $.ajax("../connect", {
    type: "POST",
    data: JSON.stringify({
      nick: nick
    }),
    success: function(data, status, req) {
      var e;
      if (data.status === 1) {
        return connect(true);
      } else if (data.status === 2) {
        alert("Your IP is banned.");
        e = document.getElementById("inputs");
        return e.parent.removeChild(e);
      }
    },
    contentType: 'application/json'
  });
};

sendText = function() {
  var data, inputBox;
  if (!nicked) {
    return false;
  }
  inputBox = document.getElementById("textArea");
  data = inputBox.value;
  if (data === "") {
    return false;
  }
  historyPos = -1;
  sendHistory.push(data);
  inputBox.value = "";
  $.ajax("../sendchat", {
    type: "POST",
    data: JSON.stringify({
      text: data,
      nick: nick
    }),
    success: null,
    contentType: 'application/json'
  });
  return true;
};

changeNick = function() {
  var newNick, nickBox;
  if (!nicked) {
    return false;
  }
  nickBox = document.getElementById("commandParms");
  newNick = nickBox.value;
  if (newNick === "") {
    return false;
  }
  nickBox.value = "";
  $.ajax("../setnick", {
    type: "POST",
    data: JSON.stringify({
      newNick: newNick
    }),
    success: function(data, status, req) {
      console.log("[DEBUG] " + (JSON.stringify(data)));
      if (data["continue"]) {
        return nick = newNick;
      } else {
        return show("*** Can't change nick (server refused)");
      }
    },
    contentType: 'application/json'
  });
  return true;
};

cmdNames = ["msg", "help", "nick", "adminauth", "kick", "kickban", "unban", "getips", "userlist"];

command = function() {
  var commandName, data, inputBox, other, paramBox, pass, pwBox;
  commandName = document.getElementById("commandName").value;
  if (commandName === "msg") {
    inputBox = document.getElementById("commandParms");
    data = inputBox.value;
    if (data === "") {
      return;
    }
    inputBox.value = "";
    return $.ajax("../sendchat", {
      type: "POST",
      data: JSON.stringify({
        text: data,
        nick: nick
      }),
      success: null,
      contentType: 'application/json'
    });
  } else if (commandName === "nick") {
    return changeNick();
  } else if (commandName === "help") {
    return show("Commands available: " + (cmdNames.join(' ')));
  } else if (commandName === "adminauth") {
    pwBox = document.getElementById("commandParms");
    pass = pwBox.value;
    pwBox.value = "";
    if (pass === "") {
      return;
    }
    return $.ajax("../adminauth", {
      type: "POST",
      data: JSON.stringify({
        password: sha256.create().update(pass).hex()
      }),
      success: function(data, status, req) {
        if (data.success) {
          return show("*** Logged as admin succesfully.");
        } else {
          return show("*** Wrong password.");
        }
      },
      contentType: "application/json"
    });
  } else if (commandName === "kick") {
    paramBox = document.getElementById("commandParms");
    other = paramBox.value;
    paramBox.value = "";
    return $.ajax("../kick", {
      type: "POST",
      data: JSON.stringify({
        other: other
      }),
      success: function(data, status, req) {
        if (data.success) {
          return show("*** Kicked " + other + " succesfully.");
        } else {
          return show("*** Kick operation refused (" + other + " doesn't exist or you haven't authed as admin!).");
        }
      },
      contentType: "application/json"
    });
  } else if (commandName === "kickban") {
    paramBox = document.getElementById("commandParms");
    other = paramBox.value;
    paramBox.value = "";
    return $.ajax("../kickban", {
      type: "POST",
      data: JSON.stringify({
        banIP: other
      }),
      success: function(data, status, req) {
        if (data.success) {
          return show("*** Banned IP " + other + " succesfully.");
        } else {
          return show("*** Kickban operation refused (IP " + other + " doesn't exist or you haven't authed as admin!).");
        }
      },
      contentType: "application/json"
    });
  } else if (commandName === "getips") {
    paramBox = document.getElementById("commandParms");
    other = paramBox.value;
    paramBox.value = "";
    return $.ajax("../getips", {
      type: "POST",
      data: JSON.stringify({
        other: other
      }),
      success: function(data, status, req) {
        if (data.success) {
          return show("*** " + other + " IPs: " + (data.ips.join(', ')) + ".");
        } else {
          return show("*** IP retrieval operation refused (" + other + " doesn't exist or you haven't authed as admin!).");
        }
      },
      contentType: "application/json"
    });
  } else if (commandName === "unban") {
    paramBox = document.getElementById("commandParms");
    other = paramBox.value;
    paramBox.value = "";
    return $.ajax("../unban", {
      type: "POST",
      data: JSON.stringify({
        banIP: other
      }),
      success: function(data, status, req) {
        if (data.success) {
          return show("*** Unbanned IP " + other + " succesfully.");
        } else {
          return show("*** Unban operation refused (IP " + other + " doesn't exist or you haven't authed as admin!).");
        }
      },
      contentType: "application/json"
    });
  } else if (commandName === "userlist") {
    return $.ajax("../userlist", {
      type: "POST",
      data: JSON.stringify(),
      success: function(data, status, req) {
        show("*** Users: " + (data.users.join(' ')));
        return show("*** Admins: " + (data.admins.join(' ')));
      },
      contentType: "application/json"
    });
  } else {
    return show("*** Invalid command. Try 'help' on the bottom left text box for more commands!");
  }
};

show = function(text) {
  return parse([
    {
      text: text,
      highlight: false,
      nick: "__noNick__"
    }
  ]);
};

validateSendText = function(event) {
  var inputBox;
  if (event.keyCode === 13 && !event.ctrlKey) {
    return sendText();
  }
  if (event.keyCode === 13 && event.ctrlKey) {
    return $.ajax("../userlist", {
      type: "POST",
      data: JSON.stringify(),
      success: function(data, status, req) {
        var candidates, inputBox, j, len, users, word, x;
        inputBox = document.getElementById("textArea");
        word = inputBox.value.split(" ")[inputBox.value.split(" ").length - 1];
        users = data.users;
        if (word === "" || has(word, users) && lastTab === "") {
          candidates = users;
          if (candidates.length === 0) {
            return;
          }
          cycle++;
          if (cycle >= candidates.length) {
            cycle = 0;
          }
        } else {
          candidates = [];
          for (j = 0, len = users.length; j < len; j++) {
            x = users[j];
            if (x.toLowerCase().startsWith(word.toLowerCase())) {
              candidates.push(x);
            }
          }
          if (candidates.length === 0) {
            return;
          }
          if (has(candidates, word)) {
            word = lastTab;
          }
          if (lastTab === word && lastTab !== "") {
            cycle++;
            if (cycle >= candidates.length) {
              cycle = 0;
            }
          } else {
            cycle = 0;
            if (lastTab === "") {
              lastTab = word;
            }
          }
          if (!has(candidates, word)) {
            lastTab = word;
          }
        }
        if (inputBox.value.split(" ").length > 1) {
          return inputBox.value = (inputBox.value.split(" ").slice(0, inputBox.value.split(" ").length - 1)) + " " + candidates[cycle] + ",";
        } else {
          return inputBox.value = candidates[cycle] + ": ";
        }
      },
      contentType: "application/json"
    });
  } else {
    inputBox = document.getElementById("textArea");
    if (historyPos === -1) {
      nonHistory = inputBox.value;
    }
    if (event.keyCode === 38) {
      historyPos++;
      if (historyPos >= sendHistory.length) {
        historyPos = sendHistory.length - 1;
      }
    }
    if (event.keyCode === 40) {
      historyPos--;
      if (historyPos < -1) {
        historyPos = -1;
      }
    }
    if (historyPos > -1) {
      return inputBox.value = sendHistory[sendHistory.length - historyPos - 1];
    } else {
      return inputBox.value = nonHistory;
    }
  }
};

parse = function(logs) {
  var _l, d, j, len, pt, results;
  results = [];
  for (j = 0, len = logs.length; j < len; j++) {
    d = logs[j];
    if ((d.text != null) && d.text !== "") {
      if (new RegExp("\\&lt;[^>]*\\&gt;", "i").test(d.text)) {
        pt = new RegExp("\\&lt;[^>]*\\&gt;", "i").exec(d.text)[0];
        _l = pt.length + 1;
        d.text = d.text.slice(_l, d.text.length);
        d.text = d.text.replace(new RegExp("[a-zA-Z1-9]+\\:\\/\\/[^ \\)]+", "ig"), function(x) {
          return "<turl>" + x + "</turl>";
        });
        d.text = d.text.replace(new RegExp("img\\(\\<turl\\>[a-zA-Z1-9]+\\:\\/\\/[^\\<]+\\<\\/turl\\>\\)", "ig"), function(x) {
          var url;
          url = x.slice(10, x.length - 8);
          return "<a href=\"" + url + "\"><img src=\"" + url + "\"></a>";
        });
        d.text = d.text.replace(new RegExp("\\<turl\\>([^\\<]+)\\<\\/turl\\>", "ig"), function(x) {
          return "<a href=\"" + (x.slice(6, x.length - 7)) + "\">" + (x.slice(6, x.length - 7)) + "</a>";
        });
        d.text = d.text.replace(new RegExp("spoiler\\(([^\\)]+)\\)"), function(x) {
          return newSpoiler(x.slice(8, x.length - 1));
        });
        d.text = d.text.replace(new RegExp("color([\\da-f]{6})\\(([^\\)]+)\\)"), "<span style=\"color: #$1;\">$2</span>");
        d.text = d.text.replace(new RegExp("bg([\\da-f]{6})\\(([^\\)]+)\\)"), "<span style=\"background-color: #$1;\">$2</span>");
        d.text = pt + " " + d.text;
      }
      if (d.text.indexOf(nick) !== -1 && d.highlight && d.nick !== nick) {
        new Audio("../highlight.wav").play();
        d.text = d.text.replace(new RegExp(nick, "g"), '<span class="highlight"><span id="nick" /></span>').replace('<span id="nick" />', nick);
      }
      console.log(d.text);
      results.push(document.getElementById("logs").innerHTML += "</br>" + d.text);
    } else {
      results.push(void 0);
    }
  }
  return results;
};

mainLoop = function() {
  var scroll;
  scroll = document.getElementById("logs").scrollTop === (document.getElementById("logs").scrollHeight - document.getElementById("logs").offsetHeight);
  return $.ajax("../getchat", {
    type: "POST",
    data: JSON.stringify({
      nick: nick
    }),
    success: function(data, status, req) {
      if ((data["continue"] != null) && data["continue"]) {
        if (data.logs != null) {
          parse(data.logs);
          window.setTimeout(mainLoop, data.next * 1000);
        } else {
          window.setTimeout(mainLoop, 5000);
        }
      } else {
        disconnect();
        show("You have disconnected.");
      }
      return window.setTimeout(function() {
        if (scroll) {
          return document.getElementById("logs").scrollTop = document.getElementById("logs").scrollHeight - document.getElementById("logs").offsetHeight;
        }
      }, data.next * 1000);
    },
    contentType: 'application/json'
  });
};

spoilerNums = 0;

newSpoiler = function(text, id) {
  if (id == null) {
    id = "spoiler" + spoilerNums;
  }
  spoilerNums++;
  return "<span id=\"" + id + "\" onclick=\"toggleSpoiler(&quot;" + id + "&quot;, &quot;" + text + "&quot;)\"><span class=\"hiddenSpoiler\">+</div></span>";
};

toggleSpoiler = function(id, text) {
  var el;
  el = document.getElementById(id);
  if (el.childNodes[0].className === "hiddenSpoiler") {
    el.childNodes[0].className = "shownSpoiler";
    return el.childNodes[0].innerHTML = "> " + text;
  } else {
    el.childNodes[0].className = "hiddenSpoiler";
    return el.childNodes[0].innerHTML = "+";
  }
};

disconnect = function() {
  document.getElementById("inputs").parentNode.removeChild(document.getElementById("inputs"));
  $.ajax("../disconnect", {
    type: "POST",
    data: JSON.stringify({
      nick: nick
    }),
    success: null,
    contentType: 'application/json'
  });
  return document.getElementById("logs").innerHTML += "</br>--- Disconnected.";
};

window.onload = function() {
  connect();
  nicked = true;
  return window.setTimeout(mainLoop, 1000);
};

$('window').on('beforeunload', disconnect);
